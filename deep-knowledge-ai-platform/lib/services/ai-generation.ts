import { TreeData } from "@/types/database";
import { debugLogger } from "@/lib/debug-logger";

interface AIGenerationResponse {
  success: boolean;
  data?: TreeData;
  error?: string;
  message?: string;
}

interface FlowiseAIResponse {
  text?: string;
  // C√≥ th·ªÉ c√≥ format kh√°c t√πy thu·ªôc v√†o response c·ªßa FlowiseAI
  [key: string]: any;
}

class AIGenerationService {
  private flowiseUrl =
    "https://cloud.flowiseai.com/api/v1/prediction/3e25445a-0652-45de-8ad6-8e1c78740a8c";
  private flowiseApiKey =
    process.env.FLOWISEAI_API_KEY ||
    "YQT-c-WYOGuUiRY7YqK5xAgoGvGnVlzKACW1dJEapS4";

  // OpenRouter config
  private openRouterUrl = "https://openrouter.ai/api/v1/chat/completions";
  private openRouterApiKey = process.env.OPENROUTER_API_KEY || "";
  private openRouterModel = "google/gemini-2.5-flash"; // Gemini 2.5 Flash

  /**
   * Generate learning tree t·ª´ user prompt v·ªõi OpenRouter (direct AI access)
   */
  async generateLearningTreeWithOpenRouter(
    userPrompt: string
  ): Promise<AIGenerationResponse> {
    try {
      console.log("G·ª≠i prompt ƒë·∫øn OpenRouter:", userPrompt);

      if (!this.openRouterApiKey) {
        return {
          success: false,
          error: "Thi·∫øu OPENROUTER_API_KEY trong env. H√£y th√™m v√†o .env.local",
        };
      }

      const systemPrompt = `B·∫°n l√† chuy√™n gia t·∫°o learning tree cho vi·ªác h·ªçc t·∫≠p. 
H√£y t·∫°o m·ªôt c·∫•u tr√∫c h·ªçc t·∫≠p d·∫°ng tree cho topic sau. 
Tr·∫£ v·ªÅ CH√çNH X√ÅC format JSON n√†y, kh√¥ng th√™m text kh√°c:

{
  "tree": [
    {
      "temp_id": "unique_id",
      "title": "Ti√™u ƒë·ªÅ node", 
      "description": "M√¥ t·∫£ chi ti·∫øt node",
      "prompt_sample": "Sample prompt ƒë·ªÉ chat v·ªÅ node n√†y (optional)",
      "is_chat_enabled": true/false,
      "requires": ["temp_id_c·ªßa_nodes_ti√™n_quy·∫øt"],
      "next": ["temp_id_c·ªßa_nodes_ti·∫øp_theo"],
      "level": 0,
      "position_x": 0,
      "position_y": 0
    }
  ]
}

T·∫°o 4-6 nodes, x·∫øp theo level t·ª´ 0 ƒë·∫øn 2. Node level 0 l√† overview, level 1 l√† concepts/setup, level 2 l√† practice.`;

      // T·∫°o timeout controller (2 ph√∫t cho OpenRouter)
      const controller = new AbortController();
      const timeoutId = setTimeout(() => {
        controller.abort();
        console.log("OpenRouter request timeout sau 2 ph√∫t");
      }, 2 * 60 * 1000);

      const response = await fetch(this.openRouterUrl, {
        method: "POST",
        headers: {
          Authorization: `Bearer ${this.openRouterApiKey}`,
          "Content-Type": "application/json",
          "HTTP-Referer": "https://deep-knowledge-ai-platform.vercel.app",
          "X-Title": "Deep Knowledge AI Platform",
        },
        body: JSON.stringify({
          model: this.openRouterModel,
          messages: [
            {
              role: "system",
              content: systemPrompt,
            },
            {
              role: "user",
              content: userPrompt,
            },
          ],
          temperature: 0.7,
          max_tokens: 2000,
        }),
        signal: controller.signal,
      });

      clearTimeout(timeoutId);

      if (!response.ok) {
        console.error("OpenRouter Error:", {
          status: response.status,
          statusText: response.statusText,
          url: this.openRouterUrl,
        });

        if (response.status === 401) {
          throw new Error(
            "OpenRouter API key kh√¥ng h·ª£p l·ªá. Ki·ªÉm tra OPENROUTER_API_KEY"
          );
        }

        throw new Error(
          `OpenRouter error! status: ${response.status} - ${response.statusText}`
        );
      }

      const result = await response.json();
      console.log("OpenRouter response:", result);

      // üêõ Log response v√†o file ƒë·ªÉ debug
      debugLogger.logFlowiseResponse(userPrompt, result);

      // Extract content t·ª´ OpenRouter response
      const aiContent = result.choices?.[0]?.message?.content;
      if (!aiContent) {
        debugLogger.logFlowiseResponse(
          userPrompt,
          result,
          "No content in OpenRouter response"
        );
        return {
          success: false,
          error: "OpenRouter kh√¥ng tr·∫£ v·ªÅ content",
        };
      }

      // Parse JSON t·ª´ AI content
      const treeData = this.parseTreeFromResponse({ text: aiContent });

      // üêõ Log parse result
      if (treeData) {
        debugLogger.logFlowiseResponse(userPrompt, result, undefined, treeData);
      } else {
        debugLogger.logFlowiseResponse(
          userPrompt,
          result,
          "Parse failed - kh√¥ng th·ªÉ extract JSON tree t·ª´ OpenRouter"
        );
      }

      if (!treeData) {
        return {
          success: false,
          error: "Kh√¥ng th·ªÉ parse JSON tree t·ª´ OpenRouter response",
        };
      }

      return {
        success: true,
        data: treeData,
        message: "T·∫°o learning tree th√†nh c√¥ng v·ªõi OpenRouter",
      };
    } catch (error) {
      console.error("L·ªói khi g·ªçi OpenRouter:", error);

      // üêõ Log error v√†o file
      debugLogger.logFlowiseResponse(
        userPrompt,
        null,
        error instanceof Error ? error.message : "L·ªói kh√¥ng x√°c ƒë·ªãnh"
      );

      // Handle timeout t·ª´ AbortController
      if (error instanceof Error && error.name === "AbortError") {
        return {
          success: false,
          error: "Timeout: OpenRouter m·∫•t qu√° 2 ph√∫t ƒë·ªÉ generate.",
        };
      }

      return {
        success: false,
        error: error instanceof Error ? error.message : "L·ªói kh√¥ng x√°c ƒë·ªãnh",
      };
    }
  }

  /**
   * Generate learning tree t·ª´ user prompt v·ªõi FlowiseAI (legacy)
   */
  async generateLearningTree(
    userPrompt: string
  ): Promise<AIGenerationResponse> {
    try {
      console.log("G·ª≠i prompt ƒë·∫øn FlowiseAI:", userPrompt);

      const response = await fetch(this.flowiseUrl, {
        method: "POST",
        headers: {
          Authorization: `Bearer ${this.flowiseApiKey}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ question: userPrompt }),
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const result: FlowiseAIResponse = await response.json();
      console.log("FlowiseAI response:", result);

      // üêõ Log response v√†o file ƒë·ªÉ debug
      debugLogger.logFlowiseResponse(userPrompt, result);

      // Parse JSON t·ª´ response text
      const treeData = this.parseTreeFromResponse(result);

      // üêõ Log parse result
      if (treeData) {
        debugLogger.logFlowiseResponse(userPrompt, result, undefined, treeData);
      } else {
        debugLogger.logFlowiseResponse(
          userPrompt,
          result,
          "Parse failed - kh√¥ng th·ªÉ extract JSON tree"
        );
      }

      if (!treeData) {
        return {
          success: false,
          error: "Kh√¥ng th·ªÉ parse JSON tree t·ª´ AI response",
        };
      }

      return {
        success: true,
        data: treeData,
        message: "T·∫°o learning tree th√†nh c√¥ng",
      };
    } catch (error) {
      console.error("L·ªói khi g·ªçi FlowiseAI:", error);

      // üêõ Log error v√†o file
      debugLogger.logFlowiseResponse(
        userPrompt,
        null,
        error instanceof Error ? error.message : "L·ªói kh√¥ng x√°c ƒë·ªãnh"
      );

      return {
        success: false,
        error: error instanceof Error ? error.message : "L·ªói kh√¥ng x√°c ƒë·ªãnh",
      };
    }
  }

  /**
   * Parse tree data t·ª´ FlowiseAI response
   */
  private parseTreeFromResponse(response: FlowiseAIResponse): TreeData | null {
    try {
      let jsonText = "";

      console.log(
        "üîç Analyzing FlowiseAI response structure:",
        Object.keys(response)
      );

      // FlowiseAI c√≥ th·ªÉ tr·∫£ v·ªÅ trong nhi·ªÅu field kh√°c nhau
      if (response.text) {
        jsonText = response.text;
        console.log("üìù Found text field, length:", jsonText.length);
      } else if (response.answer) {
        jsonText = response.answer;
        console.log("üìù Found answer field, length:", jsonText.length);
      } else if (response.result) {
        jsonText = response.result;
        console.log("üìù Found result field, length:", jsonText.length);
      } else if (response.content) {
        jsonText = response.content;
        console.log("üìù Found content field, length:", jsonText.length);
      } else if (typeof response === "string") {
        jsonText = response;
        console.log("üìù Direct string response, length:", jsonText.length);
      } else {
        // Log to√†n b·ªô response ƒë·ªÉ debug
        console.log(
          "üö® Unknown response format, full object:",
          JSON.stringify(response, null, 2)
        );
        throw new Error("Unknown response format from FlowiseAI");
      }

      console.log(
        "üìÑ Raw response text preview:",
        jsonText.substring(0, 500) + "..."
      );

      // Th·ª≠ nhi·ªÅu c√°ch extract JSON
      let parsedData = null;

      // Method 1: T√¨m JSON object b·∫±ng regex
      const jsonMatch = jsonText.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        try {
          parsedData = JSON.parse(jsonMatch[0]);
          console.log("‚úÖ Method 1 success: Regex JSON match");
        } catch (e) {
          console.log("‚ùå Method 1 failed: Invalid JSON from regex");
        }
      }

      // Method 2: T√¨m JSON array trong response (FlowiseAI th∆∞·ªùng tr·∫£ v·ªÅ array)
      if (!parsedData) {
        const arrayMatch = jsonText.match(/\[[\s\S]*\]/);
        if (arrayMatch) {
          try {
            const array = JSON.parse(arrayMatch[0]);
            parsedData = { tree: array };
            console.log("‚úÖ Method 2 success: Found array, wrapped in tree");
          } catch (e) {
            console.log("‚ùå Method 2 failed: Invalid JSON array");
          }
        }
      }

      // Method 3: Th·ª≠ parse tr·ª±c ti·∫øp
      if (!parsedData) {
        try {
          const direct = JSON.parse(jsonText);

          // N·∫øu direct parse th√†nh c√¥ng v√† l√† array ‚Üí wrap th√†nh {tree: [...]}
          if (Array.isArray(direct)) {
            parsedData = { tree: direct };
            console.log("‚úÖ Method 3 success: Direct array parse, wrapped");
          } else {
            parsedData = direct;
            console.log("‚úÖ Method 3 success: Direct object parse");
          }
        } catch (e) {
          console.log("‚ùå Method 3 failed: Direct parse failed");
        }
      }

      // Method 4: Clean whitespace v√† th·ª≠ l·∫°i
      if (!parsedData) {
        try {
          const cleanedText = jsonText.replace(/\n\s*\n/g, "\n").trim();
          const cleaned = JSON.parse(cleanedText);

          if (Array.isArray(cleaned)) {
            parsedData = { tree: cleaned };
            console.log("‚úÖ Method 4 success: Cleaned array, wrapped");
          } else {
            parsedData = cleaned;
            console.log("‚úÖ Method 4 success: Cleaned object");
          }
        } catch (e) {
          console.log("‚ùå Method 4 failed: Cleaned text still invalid");
        }
      }

      if (!parsedData) {
        throw new Error("Cannot extract JSON from any known format");
      }

      console.log("üéØ Parsed data structure:", Object.keys(parsedData));

      // Auto-fix structure
      if (Array.isArray(parsedData)) {
        parsedData = { tree: parsedData };
        console.log("üîß Auto-fixed: Wrapped array in tree object");
      }

      // Validate structure
      if (!parsedData.tree || !Array.isArray(parsedData.tree)) {
        throw new Error(
          `Invalid tree structure. Found: ${typeof parsedData.tree}`
        );
      }

      console.log("üìä Tree contains", parsedData.tree.length, "nodes");

      // Validate and auto-fix each node
      for (let i = 0; i < parsedData.tree.length; i++) {
        const node = parsedData.tree[i];

        // Auto-fix temp_id vs id field
        if (!node.temp_id && node.id) {
          node.temp_id = node.id;
          console.log(`üîß Auto-fixed: Copied id to temp_id for node ${i}`);
        }
        if (!node.temp_id && !node.id) {
          node.temp_id = `node_${i}`;
          console.log(`üîß Auto-fixed: Added temp_id for node ${i}`);
        }

        // Auto-fix missing fields
        if (!node.title) {
          throw new Error(`Node ${i} missing title`);
        }
        if (!node.description) {
          node.description = `Description for ${node.title}`;
          console.log(`üîß Auto-fixed: Added description for node ${i}`);
        }
        if (!Array.isArray(node.requires)) {
          node.requires = [];
          console.log(
            `üîß Auto-fixed: Added empty requires array for node ${i}`
          );
        }
        if (!Array.isArray(node.next)) {
          node.next = [];
          console.log(`üîß Auto-fixed: Added empty next array for node ${i}`);
        }
        if (typeof node.level !== "number") {
          node.level = i;
          console.log(`üîß Auto-fixed: Set level to ${i} for node ${i}`);
        }
      }

      console.log("‚úÖ Successfully parsed and validated tree data");
      return parsedData as TreeData;
    } catch (error) {
      console.error("‚ùå Parse error:", error);
      return null;
    }
  }

  /**
   * Generate sample tree data cho testing - ƒê∆°n gi·∫£n, √≠t nodes
   */
  generateSampleTree(topic: string): TreeData {
    return {
      tree: [
        {
          temp_id: "overview",
          title: `T·ªïng quan v·ªÅ ${topic}`,
          description: `Gi·ªõi thi·ªáu c∆° b·∫£n v·ªÅ ${topic}, l·ªãch s·ª≠ ph√°t tri·ªÉn v√† ·ª©ng d·ª•ng th·ª±c t·∫ø.`,
          is_chat_enabled: false, // Node chung chung, kh√¥ng chat ƒë∆∞·ª£c
          requires: [],
          next: ["setup", "concepts"],
          level: 0,
          position_x: 0,
          position_y: 0,
        },
        {
          temp_id: "setup",
          title: `Thi·∫øt l·∫≠p m√¥i tr∆∞·ªùng ${topic}`,
          description: `H∆∞·ªõng d·∫´n c√†i ƒë·∫∑t, c·∫•u h√¨nh v√† setup m√¥i tr∆∞·ªùng ph√°t tri·ªÉn.`,
          prompt_sample: `H∆∞·ªõng d·∫´n t·ª´ng b∆∞·ªõc c√†i ƒë·∫∑t v√† thi·∫øt l·∫≠p m√¥i tr∆∞·ªùng ph√°t tri·ªÉn ${topic}. C·∫ßn c√†i ƒë·∫∑t nh·ªØng tool g√¨?`,
          is_chat_enabled: true,
          requires: ["overview"],
          next: ["practice"],
          level: 1,
          position_x: -200,
          position_y: 100,
        },
        {
          temp_id: "concepts",
          title: `Kh√°i ni·ªám c·ªët l√µi c·ªßa ${topic}`,
          description: `Hi·ªÉu v·ªÅ c√°c th√†nh ph·∫ßn n·ªÅn t·∫£ng v√† nguy√™n l√Ω ho·∫°t ƒë·ªông c∆° b·∫£n.`,
          prompt_sample: `Gi·∫£i th√≠ch c√°c kh√°i ni·ªám c·ªët l√µi v√† nguy√™n l√Ω ho·∫°t ƒë·ªông c∆° b·∫£n c·ªßa ${topic}.`,
          is_chat_enabled: true,
          requires: ["overview"],
          next: ["practice"],
          level: 1,
          position_x: 200,
          position_y: 100,
        },
        {
          temp_id: "practice",
          title: `Th·ª±c h√†nh v√† ·ª©ng d·ª•ng`,
          description: `C√°c b√†i t·∫≠p v√† v√≠ d·ª• th·ª±c t·∫ø ƒë·ªÉ l√†m quen v·ªõi ${topic}.`,
          prompt_sample: `Cho t√¥i m·ªôt s·ªë b√†i t·∫≠p th·ª±c h√†nh c∆° b·∫£n v·ªÅ ${topic}. B·∫Øt ƒë·∫ßu v·ªõi v√≠ d·ª• ƒë∆°n gi·∫£n.`,
          is_chat_enabled: true,
          requires: ["setup", "concepts"],
          next: [],
          level: 2,
          position_x: 0,
          position_y: 200,
        },
      ],
    };
  }
}

// Export singleton instance
export const aiGenerationService = new AIGenerationService();
