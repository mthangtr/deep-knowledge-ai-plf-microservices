# Workflow Automation Rules

## Mục tiêu

Tự động hóa thao tác code và sử dụng công cụ hợp lý, tách rõ 2 chế độ:

- **Simple Mode**: Tự động hóa cao cho task nhỏ
- **Guarded Mode**: Xác minh trước cho task phức tạp

---

## Chế độ 1: Simple Mode (Tự động hóa cao)

### ✅ Được phép khi:

- Thêm/sửa UI components, props, state
- Gọi API đơn giản (CRUD cơ bản)
- Refactor nhỏ: đổi tên biến, tách hàm, cleanup code
- Thêm file mới vào đúng folder convention
- Sửa ≤ 3 file cùng lúc
- Không thay đổi API contract, database schema, auth logic

### 🛠️ Công cụ được phép:

- `edit_file` - thay đổi nhỏ
- `search_replace` - file > 2500 dòng
- `codebase_search` - tìm hiểu context
- Show code trực tiếp, không cần hỏi trước
- "Action before explanation" được phép

### 📝 Ví dụ Simple Mode:

```typescript
// ✅ Thêm prop mới cho component
interface ButtonProps {
  variant?: "primary" | "secondary";
  size?: "sm" | "md" | "lg";
  // Thêm prop mới
  loading?: boolean;
}

// ✅ Refactor nhỏ - tách hàm
const handleSubmit = async (data: FormData) => {
  const validatedData = validateFormData(data);
  await submitToAPI(validatedData);
};

// ✅ Thêm helper function
export const formatDate = (date: Date): string => {
  return new Intl.DateTimeFormat("vi-VN").format(date);
};
```

### ⚠️ Lưu ý:

- Tuân theo `commands.mdc` nếu dùng `run_terminal_cmd`
- Không gọi nhiều command liên tiếp
- Không gọi `npm run build/test` trừ khi fix lỗi
- Tự động chạy lint/format sau edit

---

## Chế độ 2: Guarded Mode (Xác minh trước)

### 🚨 Phải chuyển sang Guarded Mode khi:

- Có > 1 hướng triển khai
- Thay đổi API routes, database schema, business logic, auth
- Thêm thư viện mới
- Thay đổi folder structure (di chuyển/đổi tên folder)
- Thay đổi `.env`, config hệ thống
- Sửa > 3 file cùng lúc
- Ảnh hưởng performance đáng kể

### 🔒 Quy tắc Guarded Mode:

- **KHÔNG được code ngay**
- Phải phân tích yêu cầu bằng text-only
- Chờ xác nhận người dùng trước khi code
- **KHÔNG dùng bất kỳ tool nào** (edit_file, search_replace, terminal)

### 📋 Template phân tích:

```
**Phân tích yêu cầu:**
- Hiện tại: [mô tả state hiện tại]
- Đề xuất: [giải pháp cụ thể]
- Tác động: [file nào, logic nào bị ảnh hưởng]
- Alternative: [các option khác nếu có]

**Implementation Plan:**
1. Frontend: [thay đổi gì]
2. Backend: [thay đổi gì]
3. Database: [nếu có]
4. Breaking changes: [nếu có]

**Xác nhận:** Bạn có đồng ý với approach này không?
```

### 📝 Ví dụ Guarded Mode:

```typescript
// ❌ KHÔNG được tự động thêm thư viện mới
npm install @tanstack/react-query

// ❌ KHÔNG được tự động thay đổi API contract
// Cũ: GET /api/users
// Mới: GET /api/users?page=1&limit=10

// ❌ KHÔNG được tự động thay đổi auth logic
const isAuthenticated = (user: User) => {
  // Thay đổi logic authentication
}
```

---

## Luật sử dụng công cụ

### Ưu tiên thứ tự:

1. `edit_file` - thay đổi nhỏ, file < 2500 dòng
2. `search_replace` - file > 2500 dòng, thay đổi pattern
3. `codebase_search` - tìm hiểu context, chưa rõ codebase
4. `run_terminal_cmd` - chỉ khi không còn lựa chọn khác

### Checklist trước khi dùng tool:

- [ ] Đây là task đơn giản hay phức tạp?
- [ ] Có cần xác nhận từ người dùng không?
- [ ] Có thể gây ảnh hưởng đến hệ thống không?
- [ ] Output từ lệnh trước đã được xử lý chưa?

---

## Rollback Strategy

### Nếu Simple Mode gây lỗi:

```bash
# Undo nhanh
git checkout -- <file_path>
git restore <file_path>

# Hoặc revert commit
git revert HEAD

# Chạy lint/format để fix
npm run lint --fix
npm run format
```

### Best Practices:

- Commit thường xuyên trước khi thao tác tự động
- Test nhanh sau mỗi thay đổi
- Có backup/checkpoint trước khi thay đổi lớn

---

## Success Metrics

✅ **Thành công khi:**

- Task nhỏ được xử lý nhanh, đúng
- Task phức tạp luôn được xác minh trước
- Không có thay đổi bất ngờ gây lỗi
- Cursor không phá vỡ logic tổng thể
- Code quality được maintain (lint/format tự động)

Cursor không phá vỡ logic tổng thể vì hành động vội vàng
