---
description: Testing & linting
globs: ["**/*.{ts,tsx}"]
alwaysApply: true
---
---
description: Testing và linting configuration
alwaysApply: true
globs: ["**/*.test.ts", "**/*.spec.ts", "**/*.test.tsx", "**/*.spec.tsx"]
---

# Testing & Code Quality

## Linting Configuration
- **ESLint** với strict rules:
  ```json
  {
    "extends": [
      "next/core-web-vitals",
      "plugin:@typescript-eslint/recommended",
      "plugin:tailwindcss/recommended"
    ],
    "rules": {
      "@typescript-eslint/no-explicit-any": "error",
      "@typescript-eslint/no-unused-vars": "error",
      "no-console": ["warn", { "allow": ["warn", "error"] }]
    }
  }
  ```

## Prettier Setup
- Consistent formatting:
  ```json
  {
    "semi": false,
    "singleQuote": true,
    "tabWidth": 2,
    "trailingComma": "es5",
    "printWidth": 100,
    "plugins": ["prettier-plugin-tailwindcss"]
  }
  ```

## Testing Strategy
- **Unit Tests**: Pure functions và hooks
  ```ts
  describe('calculatePrice', () => {
    it('should apply discount correctly', () => {
      expect(calculatePrice(100, 0.2)).toBe(80)
    })
  })
  ```
  
- **Component Tests**: React Testing Library
  ```tsx
  render(<Button onClick={mockFn}>Click me</Button>)
  const button = screen.getByRole('button')
  await userEvent.click(button)
  expect(mockFn).toHaveBeenCalledTimes(1)
  ```

- **Integration Tests**: API routes và user flows
- **E2E Tests**: Critical paths với Playwright

## Test Organization
```
__tests__/
├── unit/          # Pure function tests
├── components/    # Component tests
├── integration/   # API tests
└── e2e/          # End-to-end tests
```

## Best Practices
- Use `data-testid` sparingly — prefer semantic queries:
  ```tsx
  // ✅ Good
  screen.getByRole('button', { name: /submit/i })
  screen.getByLabelText('Email')
  
  // ❌ Avoid
  screen.getByTestId('submit-button')
  ```
- Mock external dependencies
- Avoid testing implementation details
- Test user behavior, not component internals

## Git Hooks (Husky)
- **pre-commit**:
  ```sh
  npx lint-staged
  npm run type-check
  ```
  
- **pre-push**:
  ```sh
  npm run test:unit
  npm run build
  ```

## CI/CD Integration
- Run on every PR:
  - Linting
  - Type checking
  - Unit tests
  - Build verification
- Nightly runs:
  - Full test suite
  - E2E tests
  - Performance benchmarks

## Code Coverage
- Minimum 80% coverage for:
  - Business logic
  - Custom hooks
  - Utility functions
- Exclude from coverage:
  - Type definitions
  - Constants
  - Config files