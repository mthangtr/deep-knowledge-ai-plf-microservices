---
description:
globs:
alwaysApply: false
---
# Verification & Implementation Flow

## Question Classification

### 1. **Simple Implementation** 
- Direct code requests ‚Üí Implement immediately
- Bug fixes ‚Üí Fix directly
- Adding features with clear requirements ‚Üí Code first

### 2. **Complex/Ambiguous Requests** üîç
- Architecture decisions
- Multiple possible approaches  
- Breaking changes
- Performance implications
- **ALWAYS verify first with text-only discussion**

## Verification Process

### Step 1: **Text-Only Analysis**
```
**Ph√¢n t√≠ch y√™u c·∫ßu:**
- Hi·ªÉu v·∫•n ƒë·ªÅ: [explain current state]
- ƒê·ªÅ xu·∫•t gi·∫£i ph√°p: [propose solution]
- T√°c ƒë·ªông: [list implications]
- Alternatives: [other options if any]

**Implementation Plan:**
1. Frontend changes: [what will change]
2. Backend changes: [what will change]  
3. Database changes: [if any]
4. Breaking changes: [if any]

**X√°c nh·∫≠n:** B·∫°n c√≥ ƒë·ªìng √Ω v·ªõi approach n√†y kh√¥ng?
```

### Step 2: **Wait for Confirmation**
- **NO code until user confirms**
- **NO tools until approval**
- Only discuss and debate

### Step 3: **Implementation Flow** (after approval)
```
Frontend ‚Üí Backend ‚Üí Database ‚Üí Integration
```

## Implementation Order

### 1. **Frontend First**
- UI components
- Forms and validation
- State management
- API integration points

### 2. **Backend Second**  
- API routes
- Business logic
- Validation schemas
- Error handling

### 3. **Database Third**
- Schema changes
- Migrations
- Seed data

### 4. **Integration Last**
- End-to-end testing
- Error boundary updates
- Documentation

## Red Flags - Always Verify

### Architecture Changes
- Adding new dependencies
- Changing folder structure
- Modifying core patterns
- Authentication/security changes

### Breaking Changes
- API contract changes
- Database schema modifications
- Component interface changes
- Environment variable changes

### Performance Impact
- Bundle size increases
- New external APIs
- Heavy computations
- Database query changes

## Examples

### ‚ùå Don't Code Immediately
```
User: "T√¥i mu·ªën th√™m real-time chat"
Response: *starts coding*
```

### ‚úÖ Verify First
```
User: "T√¥i mu·ªën th√™m real-time chat"

Response: 
**Ph√¢n t√≠ch y√™u c·∫ßu:**
- Hi·ªán t·∫°i: Static chat v·ªõi polling
- ƒê·ªÅ xu·∫•t: WebSocket v·ªõi Socket.io
- T√°c ƒë·ªông: New backend service, frontend connection management
- Alternative: Server-Sent Events (simpler)

**Implementation Plan:**
1. Frontend: Chat component v·ªõi real-time updates
2. Backend: Socket.io server, message broadcasting
3. Database: Message schema v·ªõi timestamps  
4. Integration: Connection management, error handling

**X√°c nh·∫≠n:** B·∫°n c√≥ mu·ªën d√πng Socket.io hay prefer SSE?
```

## Success Metrics
- **Clear understanding before coding**
- **User approval for complex changes**
- **Systematic implementation flow**
- **No surprise breaking changes**
