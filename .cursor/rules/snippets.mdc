---
description:
globs:
alwaysApply: true
---

## Snippets & Templates

- Component template:

  ```tsx
  // comp.tsx snippet
  interface ${1:Component}Props {
    ${2:// props}
  }

  export const ${1:Component}: React.FC<${1:Component}Props> = (props) => {
    return (
      <div className="${3:}">
        ${0}
      </div>
    )
  }
  ```

- Hook template:

  ```tsx
  // hook.ts snippet
  export const use${1:Hook} = (${2:params}) => {
    const [state, setState] = useState(${3:initial})

    useEffect(() => {
      ${4:// effect}
    }, [${5:deps}])

    return { state }
  }
  ```

## Development Scripts

- Package.json scripts:
  ```json
  {
    "scripts": {
      "dev": "next dev",
      "build": "next build",
      "start": "next start",
      "lint": "next lint",
      "lint:fix": "next lint --fix",
      "type-check": "tsc --noEmit",
      "format": "prettier --write .",
      "test": "jest",
      "test:watch": "jest --watch",
      "analyze": "ANALYZE=true next build",
      "prepare": "husky install"
    }
  }
  ```

## Git Workflow

- Branch naming: `feature/`, `fix/`, `chore/`
- Commit conventions:
  - `feat:` new features
  - `fix:` bug fixes
  - `docs:` documentation
  - `style:` formatting
  - `refactor:` code restructuring
  - `test:` adding tests
  - `chore:` maintenance
