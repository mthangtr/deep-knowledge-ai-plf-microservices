"""
Conversation Intelligence
Dynamic persona selection and user pattern analysis for adaptive AI conversations
"""

from typing import Dict, List, Optional, Tuple
from dataclasses import dataclass
from enum import Enum
import re
from loguru import logger

from app.agents.smart_context_manager import SmartContextPackage
from app.prompts.personas import SOCRATIC_MENTOR, CREATIVE_EXPLORER, PRAGMATIC_ENGINEER, DIRECT_INSTRUCTOR
from app.prompts.domain_instructions import DOMAIN_INSTRUCTIONS_MAP
from app.config.model_router_config import Domain

class UserLearningStyle(Enum):
    """User learning style patterns"""
    EXPLORER = "explorer"          # Likes questions, discovery
    DIRECT_LEARNER = "direct"      # Wants straight answers
    CREATIVE_THINKER = "creative"  # Enjoys analogies, examples
    PRACTICAL_DOER = "practical"   # Focuses on implementation

class OutputStyle(Enum):
    """Response output styles"""
    CONCISE = "concise"
    DETAILED = "detailed"
    REFRESH = "refresh"
    STANDARD = "standard"

@dataclass
class ConversationAnalysis:
    """Analysis of current conversation context"""
    selected_persona: str
    persona_name: str
    output_style: OutputStyle
    relevance_guidance: str
    user_learning_style: UserLearningStyle
    confidence_score: float
    reasoning: str

class ConversationIntelligence:
    """Intelligence engine for adaptive conversation management"""
    
    def __init__(self):
        # Persona mapping
        self.personas = {
            "socratic": (SOCRATIC_MENTOR, "Socratic Mentor"),
            "creative": (CREATIVE_EXPLORER, "Creative Explorer"),
            "pragmatic": (PRAGMATIC_ENGINEER, "Pragmatic Engineer"),
            "direct": (DIRECT_INSTRUCTOR, "Direct Instructor")
        }
        
        # Keyword patterns for persona selection
        self.persona_keywords = {
            "direct": [
                "t√¥i kh√¥ng bi·∫øt", "ch∆∞a bao gi·ªù nghe", "mu·ªën ƒëi th·∫≥ng v√†o v·∫•n ƒë·ªÅ",
                "gi·∫£i th√≠ch tr·ª±c ti·∫øp", "ƒë·ª´ng h·ªèi n·ªØa", "c·ª© tr·∫£ l·ªùi ƒëi", "t√¥i kh√¥ng hi·ªÉu g√¨",
                "h√£y n√≥i v·ªÅ", "cho t√¥i bi·∫øt v·ªÅ", "c·∫ßn v√†o th·∫≥ng v·∫•n ƒë·ªÅ", "v√†o th·∫≥ng v·∫•n ƒë·ªÅ",
                "ng∆∞·ªùi m·ªõi", "m·ªõi b·∫Øt ƒë·∫ßu", "n√≥i th·∫≥ng", "th·∫≥ng v·∫•n ƒë·ªÅ"
            ],
            "creative": [
                "gi·∫£i th√≠ch ƒë∆°n gi·∫£n", "v√≠ d·ª• vui", "th√∫ v·ªã", "m·ªôt c√°ch s√°ng t·∫°o",
                "nh∆∞ th·ªÉ l√†", "v√≠ nh∆∞", "gi·ªëng nh∆∞ l√†", "cho ng∆∞·ªùi kh√¥ng bi·∫øt g√¨",
                "l√†m cho d·ªÖ hi·ªÉu", "v√≠ d·ª• sinh ƒë·ªông"
            ],
            "pragmatic": [
                "l·ªói", "t·ªëi ∆∞u", "step-by-step", "c·ª• th·ªÉ", "h∆∞·ªõng d·∫´n chi ti·∫øt",
                "th·ª±c h√†nh", "tri·ªÉn khai", "implement", "debug", "fix"
            ]
        }
        
        # Output style keywords
        self.output_style_keywords = {
            OutputStyle.CONCISE: ["ng·∫Øn g·ªçn", "t√≥m t·∫Øt", "√Ω ch√≠nh", "c√¢u tr·∫£ l·ªùi ng·∫Øn"],
            OutputStyle.DETAILED: ["chi ti·∫øt", "gi·∫£i th√≠ch s√¢u", "c·∫∑n k·∫Ω", "d√†i h∆°n"],
            OutputStyle.REFRESH: ["gi·∫£i th√≠ch l·∫°i", "n√≥i c√°ch kh√°c", "theo c√°ch kh√°c", "v√≠ d·ª• kh√°c"]
        }
        
        logger.info("Conversation Intelligence initialized")

    def analyze_conversation(
        self, 
        user_message: str, 
        context: SmartContextPackage,
        detected_domain: Domain
    ) -> ConversationAnalysis:
        """Analyze conversation and select optimal response strategy"""
        
        # üêõ DEBUG: Analysis start
        logger.debug(f"üß† [INTELLIGENCE] Analyzing message: {user_message[:50]}...")
        logger.debug(f"üß† [INTELLIGENCE] Domain: {detected_domain.value}, relevance: {context.relevance_score:.3f}")
        
        # 1. Detect user learning style from message patterns
        user_style = self._detect_learning_style(user_message, context)
        logger.debug(f"üß† [INTELLIGENCE] Detected learning style: {user_style.value}")
        
        # 2. Select persona based on message content and learning style
        persona_key, confidence = self._select_persona(user_message, user_style)
        persona_content, persona_name = self.personas[persona_key]
        logger.debug(f"üß† [INTELLIGENCE] Selected persona: {persona_name} (confidence: {confidence:.3f})")
        
        # 3. Determine output style
        output_style = self._detect_output_style(user_message)
        logger.debug(f"üß† [INTELLIGENCE] Output style: {output_style.value}")
        
        # 4. Generate relevance guidance
        relevance_guidance = self._generate_relevance_guidance(
            user_message, context.topic_context, context.relevance_score
        )
        logger.debug(f"üß† [INTELLIGENCE] Relevance guidance: {relevance_guidance[:100]}...")
        
        # 5. Create reasoning explanation
        reasoning = self._generate_reasoning(
            persona_key, output_style, context.relevance_score, confidence
        )
        logger.debug(f"üß† [INTELLIGENCE] Reasoning: {reasoning}")
        
        analysis = ConversationAnalysis(
            selected_persona=persona_content,
            persona_name=persona_name,
            output_style=output_style,
            relevance_guidance=relevance_guidance,
            user_learning_style=user_style,
            confidence_score=confidence,
            reasoning=reasoning
        )
        
        logger.info(f"‚úÖ [INTELLIGENCE] Analysis complete: {persona_name} | {output_style.value} | confidence: {confidence:.3f}")
        return analysis

    def _detect_learning_style(self, message: str, context: SmartContextPackage) -> UserLearningStyle:
        """Detect user's learning style from message and history"""
        message_lower = message.lower()
        
        # Check for direct learning patterns
        if any(pattern in message_lower for pattern in self.persona_keywords["direct"]):
            return UserLearningStyle.DIRECT_LEARNER
            
        # Check for creative patterns
        if any(pattern in message_lower for pattern in self.persona_keywords["creative"]):
            return UserLearningStyle.CREATIVE_THINKER
            
        # Check for practical patterns
        if any(pattern in message_lower for pattern in self.persona_keywords["pragmatic"]):
            return UserLearningStyle.PRACTICAL_DOER
            
        # Analyze question patterns for explorer style
        question_indicators = ["t·∫°i sao", "nh∆∞ th·∫ø n√†o", "why", "how", "what if"]
        if any(indicator in message_lower for indicator in question_indicators):
            return UserLearningStyle.EXPLORER
            
        # Default based on context
        if context.recent_messages:
            # Analyze recent interaction patterns
            recent_text = " ".join([msg.content.lower() for msg in context.recent_messages[-3:]])
            if "t·∫°i sao" in recent_text or "how" in recent_text:
                return UserLearningStyle.EXPLORER
                
        return UserLearningStyle.EXPLORER  # Default to Socratic style

    def _select_persona(self, message: str, learning_style: UserLearningStyle) -> Tuple[str, float]:
        """Select best persona based on message content and learning style"""
        message_lower = message.lower()
        
        # Priority 1: Direct requests override everything
        direct_matches = [kw for kw in self.persona_keywords["direct"] if kw in message_lower]
        if direct_matches:
            return "direct", 0.9
            
        # Priority 2: Specific persona keywords
        for persona_key, keywords in self.persona_keywords.items():
            if persona_key != "direct":  # Already checked
                matches = [kw for kw in keywords if kw in message_lower]
                if matches:
                    confidence = min(0.8 + len(matches) * 0.1, 1.0)
                    return persona_key, confidence
        
        # Priority 3: Learning style mapping
        style_persona_map = {
            UserLearningStyle.DIRECT_LEARNER: "direct",
            UserLearningStyle.CREATIVE_THINKER: "creative", 
            UserLearningStyle.PRACTICAL_DOER: "pragmatic",
            UserLearningStyle.EXPLORER: "socratic"
        }
        
        return style_persona_map[learning_style], 0.6

    def _detect_output_style(self, message: str) -> OutputStyle:
        """Detect preferred output style from message"""
        message_lower = message.lower()
        
        for style, keywords in self.output_style_keywords.items():
            if any(keyword in message_lower for keyword in keywords):
                return style
                
        return OutputStyle.STANDARD

    def _generate_relevance_guidance(
        self, 
        message: str, 
        topic_context: Optional[str], 
        relevance_score: float
    ) -> str:
        """Generate guidance for handling message relevance to topic"""
        if not topic_context:
            return "C√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng ƒë∆∞·ª£c x·ª≠ l√Ω trong ng·ªØ c·∫£nh t·ªïng qu√°t."
            
        topic_title = self._extract_topic_title(topic_context)
        
        if relevance_score <= 0.1:
            return (
                f"C·∫£nh b√°o: C√¢u h·ªèi n√†y c√≥ v·∫ª kh√¥ng li√™n quan ƒë·∫øn ch·ªß ƒë·ªÅ ch√≠nh l√† '{topic_title}'. "
                "Tr∆∞·ªõc khi tr·∫£ l·ªùi, h√£y l·ªãch s·ª± h·ªèi l·∫°i ng∆∞·ªùi d√πng xem h·ªç c√≥ mu·ªën ti·∫øp t·ª•c v·ªõi c√¢u h·ªèi n√†y kh√¥ng "
                "hay mu·ªën quay l·∫°i ch·ªß ƒë·ªÅ ch√≠nh. H√£y ƒë·ªÅ xu·∫•t hai l·ª±a ch·ªçn r√µ r√†ng."
            )
        elif relevance_score <= 0.4:
            return (
                f"L∆∞u √Ω: C√¢u h·ªèi n√†y c√≥ v·∫ª li√™n quan m·ªôt ph·∫ßn ƒë·∫øn ch·ªß ƒë·ªÅ ch√≠nh. "
                f"H√£y c·ªë g·∫Øng tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng v√† k·∫øt n·ªëi n√≥ tr·ªü l·∫°i v·ªõi ch·ªß ƒë·ªÅ ƒëang h·ªçc l√† '{topic_title}' "
                "ƒë·ªÉ m·ªü r·ªông t∆∞ duy."
            )
        else:
            return "C√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng c√≥ li√™n quan tr·ª±c ti·∫øp ƒë·∫øn ch·ªß ƒë·ªÅ ƒëang h·ªçc."

    def _extract_topic_title(self, topic_context: str) -> str:
        """Extract topic title from context string"""
        if "Topic:" in topic_context:
            parts = topic_context.split("Topic:")[1].split(",")[0].strip()
            return parts if parts != "None" else "ch·ªß ƒë·ªÅ hi·ªán t·∫°i"
        return "ch·ªß ƒë·ªÅ hi·ªán t·∫°i"

    def _generate_reasoning(
        self, 
        persona_key: str, 
        output_style: OutputStyle, 
        relevance_score: float,
        confidence: float
    ) -> str:
        """Generate reasoning for the selected approach"""
        reasons = []
        
        # Persona reasoning
        persona_reasons = {
            "direct": "ng∆∞·ªùi d√πng y√™u c·∫ßu tr·∫£ l·ªùi tr·ª±c ti·∫øp ho·∫∑c th·ªÉ hi·ªán l√† ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu",
            "creative": "ng∆∞·ªùi d√πng mu·ªën gi·∫£i th√≠ch sinh ƒë·ªông, d·ªÖ hi·ªÉu",
            "pragmatic": "ng∆∞·ªùi d√πng t·∫≠p trung v√†o th·ª±c h√†nh v√† tri·ªÉn khai c·ª• th·ªÉ",
            "socratic": "ng∆∞·ªùi d√πng th√≠ch kh√°m ph√° v√† t∆∞ duy ph·∫£n bi·ªán"
        }
        reasons.append(f"Ch·ªçn {persona_key} v√¨ {persona_reasons[persona_key]}")
        
        # Output style reasoning
        if output_style != OutputStyle.STANDARD:
            reasons.append(f"ƒêi·ªÅu ch·ªânh phong c√°ch tr·∫£ l·ªùi: {output_style.value}")
            
        # Relevance reasoning
        if relevance_score < 0.5:
            reasons.append(f"M·ª©c ƒë·ªô li√™n quan th·∫•p ({relevance_score:.1%}), c·∫ßn x·ª≠ l√Ω ƒë·∫∑c bi·ªát")
            
        return "; ".join(reasons)

    def get_output_style_guidance(self, output_style: OutputStyle) -> str:
        """Get specific guidance for output style"""
        guidance_map = {
            OutputStyle.CONCISE: "Ch·ªâ d·∫´n: H√£y tr·∫£ l·ªùi m·ªôt c√°ch c·ª±c k·ª≥ s√∫c t√≠ch, t·∫≠p trung v√†o ƒëi·ªÉm ch√≠nh, kh√¥ng qu√° 3 c√¢u.",
            OutputStyle.DETAILED: "Ch·ªâ d·∫´n: H√£y gi·∫£i th√≠ch m·ªôt c√°ch chi ti·∫øt v√† c·∫∑n k·∫Ω, bao g·ªìm c√°c v√≠ d·ª• v√† ng·ªØ c·∫£nh li√™n quan n·∫øu c√≥ th·ªÉ.",
            OutputStyle.REFRESH: "Ch·ªâ d·∫´n quan tr·ªçng: Ng∆∞·ªùi d√πng ƒë√£ nghe gi·∫£i th√≠ch v·ªÅ ch·ªß ƒë·ªÅ n√†y. H√£y tr√¨nh b√†y l·∫°i v·∫•n ƒë·ªÅ b·∫±ng m·ªôt g√≥c nh√¨n ho·∫∑c v√≠ d·ª• ho√†n to√†n m·ªõi. Tuy·ªát ƒë·ªëi kh√¥ng l·∫∑p l·∫°i n·ªôi dung ƒë√£ n√≥i.",
            OutputStyle.STANDARD: "H√£y tr·∫£ l·ªùi m·ªôt c√°ch t·ª± nhi√™n v·ªõi ƒë·ªô d√†i ph√π h·ª£p."
        }
        return guidance_map[output_style]

    def get_domain_instructions(self, domain: Domain) -> str:
        """Get domain-specific instructions"""
        return DOMAIN_INSTRUCTIONS_MAP.get(domain, DOMAIN_INSTRUCTIONS_MAP[Domain.DEFAULT]) 